{"version":3,"file":"index.js","names":["_nodeFs","require","_nodePath","_interopRequireDefault","_nodeProcess","_allureJsCommons","_sdk","_reporter","_legacy","_utils","_test","e","__esModule","_regeneratorValues","t","Symbol","iterator","r","call","next","isNaN","length","value","done","TypeError","_typeof","_regenerator","n","o","toStringTag","i","c","prototype","Generator","u","Object","create","_regeneratorDefine2","f","p","y","G","v","a","d","bind","l","GeneratorFunction","GeneratorFunctionPrototype","getPrototypeOf","setPrototypeOf","__proto__","displayName","w","m","defineProperty","_regeneratorDefine","enumerable","configurable","writable","_invoke","asyncGeneratorStep","Promise","resolve","then","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","s","_toArray","_arrayWithHoles","_iterableToArray","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","_nonIterableSpread","_arrayLikeToArray","toString","slice","constructor","name","from","test","ownKeys","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_classPrivateMethodInitSpec","_checkPrivateRedeclaration","add","has","_toPrimitive","toPrimitive","String","Number","_assertClassBrand","_AllureReporter_brand","WeakSet","AllureReporter","exports","config","Date","Map","options","suiteTitle","detail","onConfigure","testPlan","parseTestPlan","configElement","testsWithSelectors","tests","selector","v1ReporterTests","v2ReporterTests","cliArgs","selectorToGrepPattern","escapeRegExp","path","normalize","concat","v2SelectorsArgs","map","replace","v1SelectorsArgs","split","onError","onExit","onStdErr","onStdOut","onBegin","suite","allureRuntime","ReporterRuntime","writer","createDefaultWriter","resultsDir","onTestBegin","parent","titleMetadata","extractMetadataFromString","title","project","testFilePath","relative","testDir","location","file","relativeFileParts","sep","relativeFile","join","_suite$titlePath","titlePath","_suite$titlePath2","suiteTitles","nameSuites","testCaseIdBase","result","cleanTitle","labels","getEnvironmentLabels","links","parameters","steps","testCaseId","md5","fullName","line","column","getLanguageLabel","getFrameworkLabel","getPackageLabel","_ref","tags","tag","LabelName","TAG","startsWith","substring","_iterator","annotations","_step","annotation","type","_this$options$links","formatLink","LinkType","ISSUE","url","description","_this$options$links2","TMS","annotationLabel","getMetadataLabel","status","Status","PASSED","stage","Stage","FINISHED","attachments","statusDetails","err","repeatEach","repeatEachIndex","testUuid","startTest","allureResultsUuids","set","id","startedTestCasesTitlesCache","onStepBegin","_result","step","isRootBeforeHook","BEFORE_HOOKS_ROOT_STEP_TITLE","isRootAfterHook","AFTER_HOOKS_ROOT_STEP_TITLE","isRootHook","isBeforeHookDescendant","isBeforeHookStep","isAfterHookDescendant","isAfterHookStep","isHookStep","get","includes","category","_this$allureRuntime","_this$attachmentSteps","currentStep","attachmentSteps","_shouldIgnoreStep","baseStep","createStepResult","start","startTime","getTime","RUNNING","uuid","randomUuid","stack","beforeHooksStepsStack","afterHooksStepsStack","startStep","attachStack","beforeHooksAttachmentsStack","afterHooksAttachmentsStack","updateStep","stepResult","_attachStack$get","normalizeHookTitle","stopStep","ShallowStepsStack","undefined","onStepEnd","isAfterHook","isHook","_getWorstTestStepResu","_ref2","getWorstTestStepResult","_ref2$status","error","FAILED","getMessageAndTraceFromError","duration","_getWorstTestStepResu2","_ref3","_ref3$status","_onTestEnd","_callee","_this","_this$beforeHooksAtta","_this$afterHooksAttac","_this$attachmentSteps2","threadId","thread","_test$parent$titlePat","_test$parent$titlePat2","projectSuiteTitle","fileSuiteTitle","beforeHooksStack","afterHooksStack","attachmentsInBeforeHooks","attachmentsInAfterHooks","hookAttachmentUuids","hookAttachmentNames","attachmentsInSteps","onlyHooksAttachments","attachment","attachmentStep","_iterator2","_step2","_loop","_t","_context2","parallelIndex","workerIndex","process","pid","updateTest","testResult","getHostLabel","getThreadLabel","hasLabel","PARENT_SUITE","SUITE","SUB_SUITE","_test$annotations","skipReason","find","message","statusToAllureStats","expectedStatus","Set","hookStep","Boolean","att","processAttachment","stdout","writeAttachment","Buffer","stripAnsi","contentType","ContentType","TEXT","stderr","matchingBeforeHookStep","matchingAfterHookStep","targetStack","fileName","_context","ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE","findStepByUuid","addAttachment","source","mappedLabels","reduce","acc","label","newLabels","flatMap","labelName","labelsGroup","_testResult$steps","unshift","_testResult$steps2","stopTest","writeTest","onTestEnd","_x","_x2","_addSkippedResults","_callee2","_this2","unprocessedCases","_iterator3","_step3","testCase","_t2","_context3","allTests","_ref4","SKIPPED","errors","retry","globalStartTime","addSkippedResults","_onEnd","_callee3","_context4","writeEnvironmentInfo","writeCategoriesDefinitions","onEnd","printsToStdio","processStepMetadataMessage","attachmentStepUuid","_message$data","data","_message$data$paramet","_step$parameters","_processAttachment","_callee4","allureRuntimeMessage","parentUuid","pathWithoutEnd","actualBase64","expectedBase64","diffBase64","diffName","_context5","body","JSON","parse","applyRuntimeMessages","existsSync","match","diffEndRegexp","processedDiffs","readImageAsBase64","stringify","expected","actual","diff","IMAGEDIFF","fileExtension","_x3","_x4","_x5","version","isDescendantOfStepWithTitle","allure","allurePlaywrightLegacyApi","_default"],"sources":["../../src/index.ts"],"sourcesContent":["/* eslint max-lines: off */\nimport type { FullConfig } from \"@playwright/test\";\nimport type { TestResult as PlaywrightTestResult, Suite, TestCase, TestStep } from \"@playwright/test/reporter\";\nimport { existsSync } from \"node:fs\";\nimport path from \"node:path\";\nimport process from \"node:process\";\nimport {\n  ContentType,\n  type ImageDiffAttachment,\n  type Label,\n  LabelName,\n  LinkType,\n  Stage,\n  Status,\n  type StepResult,\n  type TestResult,\n} from \"allure-js-commons\";\nimport type { RuntimeMessage, RuntimeStepMetadataMessage, TestPlanV1Test } from \"allure-js-commons/sdk\";\nimport {\n  extractMetadataFromString,\n  getMessageAndTraceFromError,\n  getMetadataLabel,\n  hasLabel,\n  stripAnsi,\n} from \"allure-js-commons/sdk\";\nimport {\n  ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE,\n  ReporterRuntime,\n  ShallowStepsStack,\n  createDefaultWriter,\n  createStepResult,\n  escapeRegExp,\n  formatLink,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getPackageLabel,\n  getThreadLabel,\n  getWorstTestStepResult,\n  md5,\n  parseTestPlan,\n  randomUuid,\n  readImageAsBase64,\n} from \"allure-js-commons/sdk/reporter\";\nimport { allurePlaywrightLegacyApi } from \"./legacy.js\";\nimport type { AllurePlaywrightReporterConfig, AttachStack, ReporterV2 } from \"./model.js\";\nimport {\n  AFTER_HOOKS_ROOT_STEP_TITLE,\n  BEFORE_HOOKS_ROOT_STEP_TITLE,\n  diffEndRegexp,\n  isAfterHookStep,\n  isBeforeHookStep,\n  isDescendantOfStepWithTitle,\n  normalizeHookTitle,\n  statusToAllureStats,\n} from \"./utils.js\";\n\nexport class AllureReporter implements ReporterV2 {\n  config!: FullConfig;\n  suite!: Suite;\n  options: AllurePlaywrightReporterConfig;\n\n  private allureRuntime: ReporterRuntime | undefined;\n  private globalStartTime = new Date();\n  private processedDiffs: string[] = [];\n  private readonly startedTestCasesTitlesCache: string[] = [];\n  private readonly allureResultsUuids: Map<string, string> = new Map();\n  private readonly attachmentSteps: Map<string, (string | undefined)[]> = new Map();\n  private beforeHooksStepsStack: Map<string, ShallowStepsStack> = new Map();\n  private afterHooksStepsStack: Map<string, ShallowStepsStack> = new Map();\n  private beforeHooksAttachmentsStack: Map<string, AttachStack[]> = new Map();\n  private afterHooksAttachmentsStack: Map<string, AttachStack[]> = new Map();\n\n  constructor(config: AllurePlaywrightReporterConfig) {\n    this.options = { suiteTitle: true, detail: true, ...config };\n  }\n\n  onConfigure(config: FullConfig): void {\n    this.config = config;\n\n    const testPlan = parseTestPlan();\n\n    if (!testPlan) {\n      return;\n    }\n\n    // @ts-ignore\n    const configElement = config[Object.getOwnPropertySymbols(config)[0]];\n\n    if (!configElement) {\n      return;\n    }\n\n    const testsWithSelectors = testPlan.tests.filter((test) => test.selector);\n    const v1ReporterTests: TestPlanV1Test[] = [];\n    const v2ReporterTests: TestPlanV1Test[] = [];\n    const cliArgs: string[] = [];\n\n    testsWithSelectors.forEach((test) => {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      if (!/#/.test(test.selector!)) {\n        v2ReporterTests.push(test);\n        return;\n      }\n\n      v1ReporterTests.push(test);\n    });\n\n    // The path needs to be specific to the current OS. Otherwise, it may not match against the test file.\n    const selectorToGrepPattern = (selector: string) => escapeRegExp(path.normalize(`/${selector}`));\n\n    if (v2ReporterTests.length) {\n      // we need to cut off column because playwright works only with line number\n      const v2SelectorsArgs = v2ReporterTests\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        .map((test) => test.selector!.replace(/:\\d+$/, \"\"))\n        .map(selectorToGrepPattern);\n\n      cliArgs.push(...v2SelectorsArgs);\n    }\n\n    if (v1ReporterTests.length) {\n      const v1SelectorsArgs = v1ReporterTests\n        // we can filter tests only by absolute path, so we need to cut off test name\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        .map((test) => test.selector!.split(\"#\")[0])\n        .map(selectorToGrepPattern);\n\n      cliArgs.push(...v1SelectorsArgs);\n    }\n\n    if (!cliArgs.length) {\n      return;\n    }\n\n    configElement.cliArgs = cliArgs;\n  }\n\n  onError(): void {}\n\n  onExit(): void {}\n\n  onStdErr(): void {}\n\n  onStdOut(): void {}\n\n  onBegin(suite: Suite): void {\n    this.suite = suite;\n    this.allureRuntime = new ReporterRuntime({\n      ...this.options,\n      writer: createDefaultWriter({ resultsDir: this.options.resultsDir }),\n    });\n  }\n\n  onTestBegin(test: TestCase) {\n    const suite = test.parent;\n    const titleMetadata = extractMetadataFromString(test.title);\n    const project = suite.project()!;\n    const testFilePath = path.relative(project?.testDir, test.location.file);\n    const relativeFileParts = testFilePath.split(path.sep);\n    const relativeFile = relativeFileParts.join(\"/\");\n    // root > project > file path > test.describe...\n    const [, , , ...suiteTitles] = suite.titlePath();\n    const nameSuites = suiteTitles.length > 0 ? `${suiteTitles.join(\" \")} ` : \"\";\n    const testCaseIdBase = `${relativeFile}#${nameSuites}${test.title}`;\n    const result: Partial<TestResult> = {\n      name: titleMetadata.cleanTitle,\n      labels: [...titleMetadata.labels, ...getEnvironmentLabels()],\n      links: [...titleMetadata.links],\n      parameters: [],\n      steps: [],\n      testCaseId: md5(testCaseIdBase),\n      fullName: `${relativeFile}:${test.location.line}:${test.location.column}`,\n      titlePath: relativeFileParts.concat(...suiteTitles),\n    };\n\n    result.labels!.push(getLanguageLabel());\n    result.labels!.push(getFrameworkLabel(\"playwright\"));\n    result.labels!.push(getPackageLabel(testFilePath));\n    result.labels!.push({ name: \"titlePath\", value: suite.titlePath().join(\" > \") });\n\n    // support for earlier playwright versions\n    if (\"tags\" in test) {\n      const tags: Label[] = test.tags.map((tag) => ({\n        name: LabelName.TAG,\n        value: tag.startsWith(\"@\") ? tag.substring(1) : tag,\n      }));\n      result.labels!.push(...tags);\n    }\n\n    if (\"annotations\" in test) {\n      for (const annotation of test.annotations) {\n        if (annotation.type === \"skip\" || annotation.type === \"fixme\") {\n          continue;\n        }\n\n        if (annotation.type === \"issue\") {\n          result.links!.push(\n            formatLink(this.options.links ?? {}, {\n              type: LinkType.ISSUE,\n              url: annotation.description!,\n            }),\n          );\n          continue;\n        }\n\n        if (annotation.type === \"tms\" || annotation.type === \"test_key\") {\n          result.links!.push(\n            formatLink(this.options.links ?? {}, {\n              type: LinkType.TMS,\n              url: annotation.description!,\n            }),\n          );\n          continue;\n        }\n\n        if (annotation.type === \"description\") {\n          result.description = annotation.description;\n          continue;\n        }\n\n        const annotationLabel = getMetadataLabel(annotation.type, annotation.description);\n\n        if (annotationLabel) {\n          result.labels!.push(annotationLabel);\n          continue;\n        }\n\n        result.steps!.push({\n          name: `${annotation.type}: ${annotation.description!}`,\n          status: Status.PASSED,\n          stage: Stage.FINISHED,\n          parameters: [],\n          steps: [],\n          attachments: [],\n          statusDetails: {},\n        });\n      }\n    }\n\n    if (project?.name) {\n      result.parameters!.push({ name: \"Project\", value: project.name });\n    }\n\n    if (project?.repeatEach > 1) {\n      result.parameters!.push({ name: \"Repetition\", value: `${test.repeatEachIndex + 1}` });\n    }\n\n    const testUuid = this.allureRuntime!.startTest(result);\n\n    this.allureResultsUuids.set(test.id, testUuid);\n    this.startedTestCasesTitlesCache.push(titleMetadata.cleanTitle);\n  }\n\n  #shouldIgnoreStep(step: TestStep) {\n    if (!this.options.detail && step.category !== \"test.step\") {\n      return true;\n    }\n\n    // ignore noisy route.continue()\n    if (step.category === \"pw:api\" && step.title === \"route.continue()\") {\n      return true;\n    }\n\n    // playwright doesn't report this step\n    if (step.title === \"Worker Cleanup\" || isDescendantOfStepWithTitle(step, \"Worker Cleanup\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onStepBegin(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    const isRootBeforeHook = step.title === BEFORE_HOOKS_ROOT_STEP_TITLE;\n    const isRootAfterHook = step.title === AFTER_HOOKS_ROOT_STEP_TITLE;\n    const isRootHook = isRootBeforeHook || isRootAfterHook;\n    const isBeforeHookDescendant = isBeforeHookStep(step);\n    const isAfterHookDescendant = isAfterHookStep(step);\n    const isHookStep = isBeforeHookDescendant || isAfterHookDescendant;\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n\n    if ([\"test.attach\", \"attach\"].includes(step.category) && !isHookStep) {\n      const currentStep = this.allureRuntime?.currentStep(testUuid);\n      this.attachmentSteps.set(testUuid, [...(this.attachmentSteps.get(testUuid) ?? []), currentStep]);\n      return;\n    }\n\n    if (this.#shouldIgnoreStep(step)) {\n      return;\n    }\n\n    const baseStep: StepResult = {\n      ...createStepResult(),\n      name: step.title,\n      start: step.startTime.getTime(),\n      stage: Stage.RUNNING,\n      uuid: randomUuid(),\n    };\n\n    if (isHookStep) {\n      const stack = isBeforeHookDescendant\n        ? this.beforeHooksStepsStack.get(test.id)!\n        : this.afterHooksStepsStack.get(test.id)!;\n\n      if ([\"test.attach\", \"attach\"].includes(step.category)) {\n        stack.startStep(baseStep);\n\n        const attachStack = isBeforeHookDescendant ? this.beforeHooksAttachmentsStack : this.afterHooksAttachmentsStack;\n\n        stack.updateStep((stepResult) => {\n          stepResult.name = normalizeHookTitle(stepResult.name!);\n          stepResult.stage = Stage.FINISHED;\n          attachStack.set(test.id, [...(attachStack.get(test.id) ?? []), { ...step, uuid: stepResult.uuid as string }]);\n        });\n        stack.stopStep();\n        return;\n      }\n      stack.startStep(baseStep);\n\n      return;\n    }\n\n    if (isRootHook) {\n      const stack = new ShallowStepsStack();\n      stack.startStep(baseStep);\n      if (isRootBeforeHook) {\n        this.beforeHooksStepsStack.set(test.id, stack);\n      } else {\n        this.afterHooksStepsStack.set(test.id, stack);\n      }\n      return;\n    }\n\n    this.allureRuntime!.startStep(testUuid, undefined, baseStep)!;\n  }\n\n  onStepEnd(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    if (this.#shouldIgnoreStep(step)) {\n      return;\n    }\n    // ignore test.attach steps since attachments are already in the report\n    if ([\"test.attach\", \"attach\"].includes(step.category)) {\n      return;\n    }\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n    const isRootBeforeHook = step.title === BEFORE_HOOKS_ROOT_STEP_TITLE;\n    const isRootAfterHook = step.title === AFTER_HOOKS_ROOT_STEP_TITLE;\n    const isBeforeHookDescendant = isBeforeHookStep(step);\n    const isAfterHookDescendant = isAfterHookStep(step);\n    const isAfterHook = isRootAfterHook || isAfterHookDescendant;\n    const isHook = isRootBeforeHook || isRootAfterHook || isBeforeHookDescendant || isAfterHookDescendant;\n\n    if (isHook) {\n      const stack = isAfterHook ? this.afterHooksStepsStack.get(test.id)! : this.beforeHooksStepsStack.get(test.id)!;\n\n      stack.updateStep((stepResult) => {\n        const { status = Status.PASSED } = getWorstTestStepResult(stepResult.steps) ?? {};\n        stepResult.status = step.error ? Status.FAILED : status;\n        stepResult.stage = Stage.FINISHED;\n        if (step.error) {\n          stepResult.statusDetails = { ...getMessageAndTraceFromError(step.error) };\n        }\n      });\n      stack.stopStep({\n        duration: step.duration,\n      });\n      return;\n    }\n\n    const currentStep = this.allureRuntime!.currentStep(testUuid);\n\n    if (!currentStep) {\n      return;\n    }\n\n    this.allureRuntime!.updateStep(currentStep, (stepResult) => {\n      const { status = Status.PASSED } = getWorstTestStepResult(stepResult.steps) ?? {};\n      stepResult.status = step.error ? Status.FAILED : status;\n      stepResult.stage = Stage.FINISHED;\n      if (step.error) {\n        stepResult.statusDetails = { ...getMessageAndTraceFromError(step.error) };\n      }\n    });\n    this.allureRuntime!.stopStep(currentStep, { duration: step.duration });\n  }\n\n  async onTestEnd(test: TestCase, result: PlaywrightTestResult) {\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n    // We need to check parallelIndex first because pw introduced this field only in v1.30.0\n    const threadId = result.parallelIndex !== undefined ? result.parallelIndex : result.workerIndex;\n    const thread = `pid-${process.pid}-worker-${threadId}`;\n    const error = result.error;\n    // only apply default suites if not set by user\n    const [, projectSuiteTitle, fileSuiteTitle, ...suiteTitles] = test.parent.titlePath();\n    const beforeHooksStack = this.beforeHooksStepsStack.get(test.id);\n    const afterHooksStack = this.afterHooksStepsStack.get(test.id);\n\n    this.allureRuntime!.updateTest(testUuid, (testResult) => {\n      testResult.labels.push(getHostLabel());\n      testResult.labels.push(getThreadLabel(thread));\n\n      if (projectSuiteTitle && !hasLabel(testResult, LabelName.PARENT_SUITE)) {\n        testResult.labels.push({ name: LabelName.PARENT_SUITE, value: projectSuiteTitle });\n      }\n\n      if (this.options.suiteTitle && fileSuiteTitle && !hasLabel(testResult, LabelName.SUITE)) {\n        testResult.labels.push({ name: LabelName.SUITE, value: fileSuiteTitle });\n      }\n\n      if (suiteTitles.length > 0 && !hasLabel(testResult, LabelName.SUB_SUITE)) {\n        testResult.labels.push({ name: LabelName.SUB_SUITE, value: suiteTitles.join(\" > \") });\n      }\n\n      if (error) {\n        testResult.statusDetails = { ...getMessageAndTraceFromError(error) };\n      } else {\n        const skipReason = test.annotations?.find(\n          (annotation) => annotation.type === \"skip\" || annotation.type === \"fixme\",\n        )?.description;\n\n        if (skipReason) {\n          testResult.statusDetails = { ...testResult.statusDetails, message: skipReason };\n        }\n      }\n\n      testResult.status = statusToAllureStats(result.status, test.expectedStatus);\n      testResult.stage = Stage.FINISHED;\n    });\n\n    const attachmentsInBeforeHooks = this.beforeHooksAttachmentsStack.get(test.id) ?? [];\n    const attachmentsInAfterHooks = this.afterHooksAttachmentsStack.get(test.id) ?? [];\n    const hookAttachmentUuids = new Set(\n      [...attachmentsInBeforeHooks, ...attachmentsInAfterHooks]\n        .map((hookStep) => normalizeHookTitle(hookStep.title))\n        .filter(Boolean),\n    );\n    const hookAttachmentNames = new Set(\n      [...attachmentsInBeforeHooks, ...attachmentsInAfterHooks]\n        .map((hookStep) => normalizeHookTitle(hookStep.title))\n        .filter(Boolean),\n    );\n    const attachmentSteps = this.attachmentSteps.get(testUuid) ?? [];\n    const attachmentsInSteps = result.attachments.filter((attachment) => !hookAttachmentUuids.has(attachment.name));\n    const onlyHooksAttachments = result.attachments.filter((att) => hookAttachmentNames.has(att.name));\n\n    for (let i = 0; i < attachmentsInSteps.length; i++) {\n      const attachment = attachmentsInSteps[i];\n      const attachmentStep = attachmentSteps.length > i ? attachmentSteps[i] : undefined;\n\n      await this.processAttachment(testUuid, attachmentStep, attachment);\n    }\n\n    if (result.stdout.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        testUuid,\n        undefined,\n        \"stdout\",\n        Buffer.from(stripAnsi(result.stdout.join(\"\")), \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    if (result.stderr.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        testUuid,\n        undefined,\n        \"stderr\",\n        Buffer.from(stripAnsi(result.stderr.join(\"\")), \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    // FIXME: temp logic for labels override, we need it here to keep the reporter compatible with v2 API\n    // in next iterations we need to implement the logic for every javascript integration\n\n    for (const attachment of onlyHooksAttachments) {\n      const matchingBeforeHookStep = attachmentsInBeforeHooks.find(\n        (step) => normalizeHookTitle(step.title) === attachment.name,\n      );\n      const matchingAfterHookStep = attachmentsInAfterHooks.find(\n        (step) => normalizeHookTitle(step.title) === attachment.name,\n      );\n      const targetStack = matchingBeforeHookStep ? beforeHooksStack : afterHooksStack;\n      const hookStep = matchingBeforeHookStep || matchingAfterHookStep;\n\n      if (attachment.contentType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE) {\n        await this.processAttachment(testUuid, hookStep?.uuid, attachment);\n        continue;\n      }\n\n      if (targetStack && hookStep) {\n        const stepResult = targetStack?.findStepByUuid(hookStep?.uuid);\n        if (stepResult) {\n          const fileName = targetStack.addAttachment(attachment, this.allureRuntime!.writer);\n          stepResult.attachments.push({\n            name: attachment.name,\n            type: attachment.contentType,\n            source: fileName,\n          });\n        }\n      }\n    }\n\n    this.allureRuntime!.updateTest(testUuid, (testResult) => {\n      const mappedLabels = testResult.labels.reduce<Record<string, Label[]>>((acc, label) => {\n        if (!acc[label.name]) {\n          acc[label.name] = [];\n        }\n\n        acc[label.name].push(label);\n\n        return acc;\n      }, {});\n      const newLabels = Object.keys(mappedLabels).flatMap((labelName) => {\n        const labelsGroup = mappedLabels[labelName];\n\n        if (\n          labelName === LabelName.SUITE ||\n          labelName === LabelName.PARENT_SUITE ||\n          labelName === LabelName.SUB_SUITE\n        ) {\n          return labelsGroup.slice(-1);\n        }\n\n        return labelsGroup;\n      });\n\n      if (beforeHooksStack) {\n        testResult.steps.unshift(...beforeHooksStack.steps);\n        this.beforeHooksStepsStack.delete(test.id);\n      }\n\n      if (afterHooksStack) {\n        testResult.steps.push(...afterHooksStack.steps);\n        this.afterHooksStepsStack.delete(test.id);\n      }\n\n      testResult.labels = newLabels;\n    });\n    this.allureRuntime!.stopTest(testUuid, { duration: result.duration });\n    this.allureRuntime!.writeTest(testUuid);\n  }\n\n  async addSkippedResults() {\n    const unprocessedCases = this.suite.allTests().filter(({ title }) => {\n      const titleMetadata = extractMetadataFromString(title);\n\n      return !this.startedTestCasesTitlesCache.includes(titleMetadata.cleanTitle);\n    });\n\n    for (const testCase of unprocessedCases) {\n      this.onTestBegin(testCase);\n      await this.onTestEnd(testCase, {\n        status: Status.SKIPPED,\n        attachments: [],\n        duration: 0,\n        errors: [],\n        parallelIndex: 0,\n        workerIndex: 0,\n        retry: 0,\n        steps: [],\n        stderr: [],\n        stdout: [],\n        startTime: this.globalStartTime,\n        annotations: [],\n      });\n    }\n  }\n\n  async onEnd() {\n    await this.addSkippedResults();\n\n    this.allureRuntime!.writeEnvironmentInfo();\n    this.allureRuntime!.writeCategoriesDefinitions();\n  }\n\n  printsToStdio(): boolean {\n    return false;\n  }\n\n  private processStepMetadataMessage(attachmentStepUuid: string, message: RuntimeStepMetadataMessage) {\n    const { name, parameters = [] } = message.data;\n\n    this.allureRuntime!.updateStep(attachmentStepUuid, (step) => {\n      if (name) {\n        step.name = name;\n      }\n\n      step.parameters.push(...parameters);\n    });\n  }\n\n  private async processAttachment(\n    testUuid: string,\n    attachmentStepUuid: string | undefined,\n    attachment: {\n      name: string;\n      contentType: string;\n      path?: string;\n      body?: Buffer;\n    },\n  ) {\n    if (!attachment.body && !attachment.path) {\n      return;\n    }\n\n    const allureRuntimeMessage = attachment.contentType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE;\n\n    if (allureRuntimeMessage && !attachment.body) {\n      return;\n    }\n\n    if (allureRuntimeMessage) {\n      const message = JSON.parse(attachment.body!.toString()) as RuntimeMessage;\n\n      if (message.type === \"step_metadata\") {\n        this.processStepMetadataMessage(attachmentStepUuid!, message);\n        return;\n      }\n\n      this.allureRuntime!.applyRuntimeMessages(testUuid, [message]);\n      return;\n    }\n\n    const parentUuid = this.allureRuntime!.startStep(testUuid, attachmentStepUuid, { name: attachment.name });\n\n    // only stop if step is created. Step may not be created only if test with specified uuid doesn't exists.\n    // usually, missing test by uuid means we should completely skip result processing;\n    // the later operations are safe and will only produce console warnings\n    if (parentUuid) {\n      this.allureRuntime!.stopStep(parentUuid, undefined);\n    }\n\n    if (attachment.body) {\n      this.allureRuntime!.writeAttachment(testUuid, parentUuid, attachment.name, attachment.body, {\n        contentType: attachment.contentType,\n      });\n    } else if (!existsSync(attachment.path!)) {\n      return;\n    } else {\n      const contentType =\n        attachment.name === \"trace\" && attachment.contentType === \"application/zip\"\n          ? \"application/vnd.allure.playwright-trace\"\n          : attachment.contentType;\n\n      this.allureRuntime!.writeAttachment(testUuid, parentUuid, attachment.name, attachment.path!, {\n        contentType,\n      });\n    }\n\n    if (!attachment.name.match(diffEndRegexp)) {\n      return;\n    }\n\n    const pathWithoutEnd = attachment.path!.replace(diffEndRegexp, \"\");\n\n    if (this.processedDiffs.includes(pathWithoutEnd)) {\n      return;\n    }\n\n    const actualBase64 = await readImageAsBase64(`${pathWithoutEnd}-actual.png`);\n    const expectedBase64 = await readImageAsBase64(`${pathWithoutEnd}-expected.png`);\n    const diffBase64 = await readImageAsBase64(`${pathWithoutEnd}-diff.png`);\n    const diffName = attachment.name.replace(diffEndRegexp, \"\");\n\n    this.allureRuntime!.writeAttachment(\n      testUuid,\n      undefined,\n      diffName,\n      Buffer.from(\n        JSON.stringify({\n          expected: expectedBase64,\n          actual: actualBase64,\n          diff: diffBase64,\n          name: diffName,\n        } as ImageDiffAttachment),\n        \"utf-8\",\n      ),\n      {\n        contentType: ContentType.IMAGEDIFF,\n        fileExtension: \".imagediff\",\n      },\n    );\n\n    this.processedDiffs.push(pathWithoutEnd);\n  }\n\n  version(): \"v2\" {\n    return \"v2\";\n  }\n}\n\n/**\n * @deprecated for removal, import functions directly from \"allure-js-commons\".\n */\nexport const allure = allurePlaywrightLegacyApi;\n\n/**\n * @deprecated for removal, import functions directly from \"@playwright/test\".\n */\nexport { test, expect } from \"@playwright/test\";\n\nexport default AllureReporter;\n"],"mappings":"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","ignoreList":[]}